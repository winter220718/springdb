02_Mybatis.txt

 # Mybatis 
 (https://mybatis.org/mybatis-3/getting-started.html)
 (https://mvnrepository.com/search?q=mybatis)
  -> Mybatis, Mybatis Spring, Spring JDBC maven 검색 후 pom.xml에 설정
 
  - 쿼리문만 적으면 알아서 DB에서 데이터를 꺼내오는 프레임워크(빈칸 채우기 식으로 코드를 진행하는 것)
  - 거의 모든 jdbc 관련 코드를 자동화 해준다
  - 개발자는 사용할 쿼리의 종류와 SQL문만 작성하면 된다
  
 # 필요한 의존성들
  
  - Mybatis
  - Mybatis Spring 
  - Spring-JDBC
 
 # Mapper
 
  - Mybatis에 Mapper 인터페이스를 등록하면 해당 Mapper 정보를 통해 자동으로 메서드를 생성한다
    (리턴타입, 쿼리문 종류, 쿼리문만 가지고 모든 jdbc코드를 자동 생성)
    
  - Mapper는 mybatis-spring 의존성을 등록한 후 스캔을 통해 쉽게 등록할 수 있다
    <mybatis-spring:scan base-package="com.ezen.springdb.mapper"/>
    
  - Mybatis가 Mapper를 통해 메서드를 자동으로 생성하기 위해서는 SqlSessionFactory라는 인스턴스가 필요한데
    해당 인스턴스를 생성하기 위해서는 DataSource가 필요하다 (그래서 아래와 같이 HikariCP로 만들어둔 HikariDataSource를 전달) 
    
    *여기서 Fatory는 기본적인 패턴을 지니고 있다(생성자를 굳이 사용할 필요가 없음)
    <bean id="sqlSessionFatory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="hikari_dataSource"/>
	</bean>
	
 # 어노테이션 방식의 Mapper
 
  @Select(query)
  @Insert(query)
  @Update(query)
  @Delete(query)
  
  - 파라미터를 사용할때는 #{board_id}처럼 사용한다
  - DB의 컬럼명과 DTO의 필드명이 일치하면 데이터를 자동으로 매핑해준다
  - 조회하는 데이터가 여러행인 경우 자동으로 List타입으로 매핑해준다
  - 조회하는 데이터가 하나의 행인 경우 해당 DTO타입으로 매핑해준다 